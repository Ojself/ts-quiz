{"version":3,"sources":["API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","images/nattu-adnan.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endPoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d893255.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\nexport type QuestionState = Question & { answers: string[] };\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endPoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endPoint)).json();\n\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: Boolean;\n  userClicked: Boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? \"linear-gradient(90deg, #56ffa4, #59ffa4, #59bc86)\"\n        : !correct && userClicked\n        ? \"linear-gradient(90deg, #56ffa4, #ff5656, #c16868)\"\n        : \"linear-gradient(90deg, #56ffa4, #56ccff, #6eafb4)\"};\n    border: 5px solid #fff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from \"react\";\n\n//types\nimport { AnswerObject } from \"../App\";\n\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => {\n  return (\n    <Wrapper>\n      <p className=\"number\">\n        Question: {questionNr} / {totalQuestions}\n      </p>\n      <p dangerouslySetInnerHTML={{ __html: question }} />\n      <div>\n        {answers.map((answer) => (\n          <ButtonWrapper\n            key={answer}\n            correct={userAnswer?.correctAnswer === answer}\n            userClicked={userAnswer?.answer === answer}\n          >\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\n            </button>\n          </ButtonWrapper>\n        ))}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default QuestionCard;\n","export const shuffleArray = (array: any[]) => {\n  return [...array].sort(() => Math.random() - 0.5);\n};\n","export default __webpack_public_path__ + \"static/media/nattu-adnan.c866d607.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./images/nattu-adnan.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    height: 100%\n}\n\nbody {\n background-image: url(${BGImage});\n background-size: cover;\n margin: 0;\n padding: 0 20px;\n display: flex;\n justify-content: center;\n\n}\n\n* {\n    box-sizing: border-box;\n    font-family: 'Catamaran', sans-serif\n}\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n  h1 {\n    font-family: Fascinate Inline, Haettenschweiler, \"Arial Narrow Bold\",\n      sans-serif;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    font-weight: 400;\n    text-align: center;\n    margin: 20px;\n  }\n\n  .start,\n  .next {\n    cursor: pointer;\n    border: 2px solid #d38558;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n`;\n","import React, { useState } from \"react\";\n\nimport QuestionCard from \"./components/QuestionCard\";\nimport { fetchQuizQuestions } from \"./API\";\n\n// TYPES\nimport { Difficulty, QuestionState } from \"./API\";\n\n// Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore((prev) => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start Trivia\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score:{score}</p> : null}\n\n        {loading && <p>Loading Questions ...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!loading &&\n        !gameOver &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n\n/* https://opentdb.com/api.php?amount=10 */\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}